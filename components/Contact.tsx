import React, { useState } from "react";
import Image from "next/image";
import {
  AiOutlineMenu,
  AiOutlineClose,
  AiOutlineFolderOpen,
  AiOutlineMail,
} from "react-icons/ai";
import { FaGithub, FaLinkedin } from "react-icons/fa";
import { BsFillPersonLinesFill } from "react-icons/bs";
import { HiOutlineChevronDoubleUp } from "react-icons/hi";
import Link from "next/link";
import sendgrid from "@sendgrid/mail";
import Navbar from "./Navbar";
import Layout from "./Layout";
import { EmailData } from "@sendgrid/helpers/classes/email-address";
import Envelope from "../public/assets/envelope.png";

const Contact = () => {
  // States for contact form fields
  const [fullname, setFullname] = useState("");
  const [email, setEmail] = useState("");
  const [subject, setSubject] = useState("");
  const [message, setMessage] = useState("");

  //   Form validation state
  const [errors, setErrors] = useState({});

  //   Setting button text on form submission
  const [buttonText, setButtonText] = useState("Send");

  // Setting success or failure messages states
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [showFailureMessage, setShowFailureMessage] = useState(false);

  // Validation check method
  const handleValidation = () => {
    let tempErrors = {} as any;
    let isValid = true;

    if (fullname.length <= 0) {
      tempErrors["fullname"] = true;
      isValid = false;
    }
    if (email.length <= 0) {
      tempErrors["email"] = true;
      isValid = false;
    }
    if (subject.length <= 0) {
      tempErrors["subject"] = true;
      isValid = false;
    }
    if (message.length <= 0) {
      tempErrors["message"] = true;
      isValid = false;
    }
    setErrors({ ...tempErrors });
    console.log("errors", errors);
    console.log("is it valid? ", isValid);
    return isValid;
  };

  //   Handling form submit
  const handleSubmit = async (event: any) => {
    event.preventDefault(); // Prevent the default form submission behavior
    // Collect the form data from the event object
    const formData = new FormData(event.target);
    const msg = {
      from: formData.get("email"),
      name: formData.get("name"),
      subject: formData.get("subject"),
      text: formData.get("message"),
    };
    let isValidForm = handleValidation();
    if (isValidForm) {
      setButtonText("Sending");
      const res = await fetch("/api/mail", {
        body: JSON.stringify(msg),
        headers: {
          "Content-Type": "application/json",
        },
        method: "POST",
      });
      const { error } = await res.json();
      if (error) {
        console.log(error);
        setShowSuccessMessage(false);
        setShowFailureMessage(true);
        setButtonText("Send");
        return;
      }
      console.log("response", res.json());
      setShowSuccessMessage(true);
      setShowFailureMessage(false);
      setButtonText("Send");
      setFullname("");
      setEmail("");
      setMessage("");
      setSubject("");
    }
    console.log(fullname, email, subject, message);
  };

  return (
    <Layout>
      <section className="bg-three h-full">
        <Navbar />
        <div id="contact" className="w-full lg:h-screen ">
          <div className="max-w-[1240px] m-auto px-2 py-16 w-full">
            <h1 className="text-center">Contact</h1>
            <div className="grid lg:grid-cols-5 gap-8 mt-10">
              <div className="col-span-3 lg:col-span-2 w-full h-full shadow-md rounded-md p-4">
                <div className="lg:p-4 h-full">
                  <div className="relative">
                    <Image
                      className="rounded-md mx-auto"
                      src={Envelope}
                      alt="/"
                      width="600"
                      height="100"
                    ></Image>
                    <div className="opacity-0 hover:opacity-100 duration-300 absolute inset-0 z-10 text-white font-semibold text-center bg-black bg-opacity-40 rounded-md max-w-[600px] mx-auto">
                      <h2 className="mt-24">Fun Fact:</h2>
                      <p>This image was generated by Ai!</p>
                    </div>
                  </div>
                  <div className="text-center">
                    <h2 className="pt-2 ">Blane Steckline</h2>
                    <h3 className="">Full-Stack Developer</h3>
                    <p className="">
                      I am open to any and all potential opportunities. If you
                      are interested, please get in touch!
                    </p>
                  </div>
                  <div className="flex items-center max-w-[120px] m-auto justify-between py-4 mt-4">
                    <div className="rounded-md button-bg shadow-sm shadow-gray-400 p-3 cursor-pointer hover:scale-110 ease-in-out duration-150">
                      <FaLinkedin />
                    </div>
                    <div className="rounded-md button-bg  shadow-sm shadow-gray-400 p-3 cursor-pointer hover:scale-110 ease-in-out duration-150">
                      <FaGithub />
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-span-3 w-full h-auto shadow-md rounded-md lg:p-4">
                <div className="p-4">
                  <form onSubmit={handleSubmit}>
                    <div className="grid gap-4 w-full py-2">
                      <div className="flex flex-col">
                        <label className="uppercase text-sm py-2">Name</label>
                        <input
                          className="border-2 rounded-md p-3 flex"
                          value={fullname}
                          onChange={(event) => {
                            setFullname(event.target.value);
                          }}
                          type="text"
                          name="name"
                        ></input>
                        {(errors as any)?.fullname && (
                          <p className="text-red-500">Name cannot be empty.</p>
                        )}
                      </div>
                    </div>
                    <div className="flex flex-col py-2">
                      <label className="uppercase text-sm py-2">
                        Email Address
                      </label>
                      <input
                        className="border-2 rounded-md p-3 flex"
                        value={email}
                        onChange={(event) => {
                          setEmail(event.target.value);
                        }}
                        type="email"
                        name="email"
                      ></input>
                      {(errors as any)?.email && (
                        <p className="text-red-500">Email cannot be empty.</p>
                      )}
                    </div>
                    <div className="flex flex-col py-2">
                      <label className="uppercase text-sm py-2">Subject</label>
                      <input
                        className="border-2 rounded-md p-3 flex"
                        type="text"
                        name="subject"
                        value={subject}
                        onChange={(event) => {
                          setSubject(event.target.value);
                        }}
                      ></input>
                      {(errors as any)?.subject && (
                        <p className="text-red-500">Subject cannot be empty.</p>
                      )}
                    </div>
                    <div className="flex flex-col py-2">
                      <label className="uppercase text-sm py-2">Message</label>
                      <textarea
                        value={message}
                        onChange={(event) => {
                          setMessage(event.target.value);
                        }}
                        className="border-2 rounded-md p-3"
                        name="message"
                        rows={10}
                      ></textarea>
                      {(errors as any)?.message && (
                        <p className="text-red-500">Message cannot be empty.</p>
                      )}
                    </div>
                    <button className="w-full py-4 mt-4">{buttonText}</button>
                    <div>
                      {showSuccessMessage && (
                        <h3 className="text-green-300">
                          {" "}
                          Thank you, your message has been delivered!
                        </h3>
                      )}
                      {showFailureMessage && (
                        <h3 className="text-red-500">
                          Sorry, messaged failed to send. Please try again!
                        </h3>
                      )}
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default Contact;
